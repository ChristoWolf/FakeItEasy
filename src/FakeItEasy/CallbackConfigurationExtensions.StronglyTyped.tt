<#@ template hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ include file="CodeGen/Ordinals.ttinclude" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a T4 template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace FakeItEasy
{
    using System;
    using FakeItEasy.Configuration;

    public static partial class CallbackConfigurationExtensions
    {
<#
    for (int typeParametersCount = 1; typeParametersCount <= 8; typeParametersCount++)
    {
        var typeParamList = string.Join(", ", Enumerable.Range(1, typeParametersCount).Select(i => "T" + i));
        var argumentList = string.Join(", ", Enumerable.Range(1, typeParametersCount).Select(i => $"call.GetArgument<T{i}>({i - 1})"));
#>
        /// <summary>
        /// Executes the specified action when a matching call is being made.
        /// </summary>
        /// <param name="configuration">The configuration that is extended.</param>
        /// <param name="actionToInvoke">The <see cref="Action{<#= typeParamList #>}"/> to invoke.</param>
        /// <typeparam name="TInterface">The type of configuration interface to return.</typeparam>
<#
        for (int i = 1; i <= typeParametersCount; i++)
        {
#>
        /// <typeparam name="T<#= i #>">The type of the <#= Ordinals[i] #> argument of the faked method call.</typeparam>
<#
        }
#>
        /// <exception cref="FakeConfigurationException">The signatures of the faked method and the <paramref name="actionToInvoke"/> do not match.</exception>
        /// <returns>The configuration object.</returns>
        public static TInterface Invokes<TInterface, <#= typeParamList #>>(this ICallbackConfiguration<TInterface> configuration, Action<<#= typeParamList #>> actionToInvoke)
        {
            Guard.AgainstNull(configuration, nameof(configuration));
            Guard.AgainstNull(actionToInvoke, nameof(actionToInvoke));

            return configuration.Invokes(call =>
                {
                    ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method, actionToInvoke.GetMethodInfo(), NameOfInvokesFeature);

                    actionToInvoke(<#= argumentList #>);
                });
        }

<#
    }
#>
    }
}
