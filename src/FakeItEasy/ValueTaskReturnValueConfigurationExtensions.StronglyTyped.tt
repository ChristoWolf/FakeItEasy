<#@ template hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ include file="CodeGen/Ordinals.ttinclude" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a T4 template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace FakeItEasy
{
    using System;
    using System.Diagnostics.CodeAnalysis;
    using System.Reflection;
    using System.Threading.Tasks;
    using FakeItEasy.Configuration;

    public static partial class ValueTaskReturnValueConfigurationExtensions
    {
        private const string NameOfReturnsLazilyFeature = "returns lazily";

<#
    for (int typeParametersCount = 1; typeParametersCount <= 8; typeParametersCount++)
    {
        var typeParamList = string.Join(", ", Enumerable.Range(1, typeParametersCount).Select(i => "T" + i));
        var argumentList = string.Join(", ", Enumerable.Range(1, typeParametersCount).Select(i => $"call.GetArgument<T{i}>({i - 1})"));
#>
        /// <summary>
        /// Specifies a function used to produce the <see cref="ValueTask{T}.Result"/> of the <see cref="ValueTask{T}"/> which is returned when the configured call is made.
        /// The function will be called each time the configured call is made and can return different values each time.
        /// The <see cref="ValueTask{T}"/> returned from the configured call will have its <see cref="ValueTask{T}.IsCompletedSuccessfully"/> property set to <c>true</c>".
        /// </summary>
        /// <typeparam name="TReturnType">The type of the result produced by the <see cref="ValueTask{T}"/>.</typeparam>
<#
        for (int i = 1; i <= typeParametersCount; i++)
        {
#>
        /// <typeparam name="T<#= i #>">The type of the <#= Ordinals[i] #> argument of the faked method call.</typeparam>
<#
        }
#>
        /// <param name="configuration">The configuration to extend.</param>
        /// <param name="valueProducer">A function that produces the <see cref="ValueTask{T}.Result"/> of the <see cref="ValueTask{T}"/>.</param>
        /// <returns>The configuration object.</returns>
        /// <exception cref="FakeConfigurationException">The signatures of the faked method and the <paramref name="valueProducer"/> do not match.</exception>
        [SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures", Justification = "Necessary to support special handling of ValueTask<T> return values.")]
        public static IAfterCallConfiguredWithOutAndRefParametersConfiguration<IReturnValueConfiguration<ValueTask<TReturnType>>>
            ReturnsLazily<TReturnType, <#= typeParamList #>>(this IReturnValueConfiguration<ValueTask<TReturnType>> configuration, Func<<#= typeParamList #>, TReturnType> valueProducer)
        {
            Guard.AgainstNull(configuration, nameof(configuration));
            Guard.AgainstNull(valueProducer, nameof(valueProducer));

            return configuration.ReturnsLazily(call =>
            {
                ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method, valueProducer.GetMethodInfo(), NameOfReturnsLazilyFeature);

                return new ValueTask<TReturnType>(valueProducer(<#= argumentList #>));
            });
        }

<#
    }
#>
    }
}
